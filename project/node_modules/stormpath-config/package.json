{
  "_args": [
    [
      {
        "raw": "stormpath-config@github:stormpath/stormpath-node-config#okta",
        "scope": null,
        "escapedName": "stormpath-config",
        "name": "stormpath-config",
        "rawSpec": "github:stormpath/stormpath-node-config#okta",
        "spec": "github:stormpath/stormpath-node-config#okta",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:stormpath/stormpath-node-config.git#okta",
          "sshUrl": "git+ssh://git@github.com/stormpath/stormpath-node-config.git#okta",
          "httpsUrl": "git+https://github.com/stormpath/stormpath-node-config.git#okta",
          "gitUrl": "git://github.com/stormpath/stormpath-node-config.git#okta",
          "shortcut": "github:stormpath/stormpath-node-config#okta",
          "directUrl": "https://raw.githubusercontent.com/stormpath/stormpath-node-config/okta/package.json"
        }
      },
      "D:\\node\\basic\\ExpressFirst\\ExpressProject1\\project\\node_modules\\express-stormpath"
    ]
  ],
  "_from": "stormpath/stormpath-node-config#okta",
  "_id": "stormpath-config@0.0.27",
  "_inCache": true,
  "_location": "/stormpath-config",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stormpath-config@github:stormpath/stormpath-node-config#okta",
    "scope": null,
    "escapedName": "stormpath-config",
    "name": "stormpath-config",
    "rawSpec": "github:stormpath/stormpath-node-config#okta",
    "spec": "github:stormpath/stormpath-node-config#okta",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:stormpath/stormpath-node-config.git#okta",
      "sshUrl": "git+ssh://git@github.com/stormpath/stormpath-node-config.git#okta",
      "httpsUrl": "git+https://github.com/stormpath/stormpath-node-config.git#okta",
      "gitUrl": "git://github.com/stormpath/stormpath-node-config.git#okta",
      "shortcut": "github:stormpath/stormpath-node-config#okta",
      "directUrl": "https://raw.githubusercontent.com/stormpath/stormpath-node-config/okta/package.json"
    }
  },
  "_requiredBy": [
    "/express-stormpath",
    "/stormpath"
  ],
  "_resolved": "git://github.com/stormpath/stormpath-node-config.git#0cf1158865646f5f3d97856b98afaacaaea8d4b9",
  "_shasum": "74a8c664859c1f53439855fb2d8a14666bf44085",
  "_shrinkwrap": null,
  "_spec": "stormpath-config@github:stormpath/stormpath-node-config#okta",
  "_where": "D:\\node\\basic\\ExpressFirst\\ExpressProject1\\project\\node_modules\\express-stormpath",
  "author": {
    "name": "Stormpath, Inc."
  },
  "bugs": {
    "url": "https://github.com/stormpath/stormpath-node-config/issues"
  },
  "dependencies": {
    "async": "^2.0.1",
    "flat": "^2.0.0",
    "js-yaml": "^3.5.4",
    "lodash": "^4.0.0",
    "properties-parser": "^0.3.0"
  },
  "description": "Stormpath configuration loader.",
  "devDependencies": {
    "chai": "^3.4.0",
    "coveralls": "^2.11.4",
    "istanbul": "^0.4.3",
    "mocha": "^3.0.2",
    "mocha-lcov-reporter": "^1.1.0",
    "sinon": "^1.17.2",
    "stormpath": "^0.18.0",
    "temp": "^0.8.3"
  },
  "gitHead": "0cf1158865646f5f3d97856b98afaacaaea8d4b9",
  "homepage": "https://github.com/stormpath/stormpath-node-config",
  "keywords": [
    "express",
    "stormpath",
    "authentication",
    "security",
    "configuration"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "stormpath-config",
  "optionalDependencies": {},
  "readme": "#Stormpath is Joining Okta\r\nWe are incredibly excited to announce that [Stormpath is joining forces with Okta](https://stormpath.com/blog/stormpaths-new-path?utm_source=github&utm_medium=readme&utm-campaign=okta-announcement). Please visit [the Migration FAQs](https://stormpath.com/oktaplusstormpath?utm_source=github&utm_medium=readme&utm-campaign=okta-announcement) for a detailed look at what this means for Stormpath users.\r\n\r\nWe're available to answer all questions at [support@stormpath.com](mailto:support@stormpath.com).\r\n\r\n# stormpath-node-config\r\n\r\n*Stormpath configuration loader.*\r\n\r\n[![NPM Version](https://img.shields.io/npm/v/stormpath-config.svg?style=flat)](https://npmjs.org/package/stormpath-config)\r\n[![NPM Downloads](http://img.shields.io/npm/dm/stormpath-config.svg?style=flat)](https://npmjs.org/package/stormpath-config)\r\n[![Build Status](https://img.shields.io/travis/stormpath/stormpath-node-config.svg?style=flat)](https://travis-ci.org/stormpath/stormpath-node-config)\r\n[![Coverage Status](https://coveralls.io/repos/stormpath/stormpath-node-config/badge.svg?branch=master&service=github)](https://coveralls.io/github/stormpath/stormpath-node-config?branch=master)\r\n\r\nThis library is responsible for loading the Stormpath configuration.  It is an internal module used by stormpath-node-sdk, and express-stormpath, and is\r\nnot meant for general consumption.\r\n\r\n\r\n## Installation\r\n\r\nTo install this library, just run:\r\n\r\n```\r\n$ npm install stormpath-config --save\r\n```\r\n\r\n\r\n## Usage\r\n\r\nFirst, start by including the library:\r\n\r\n```\r\nvar stormpathConfig = require('stormpath-config');\r\n```\r\n\r\nOnce the library is loaded, you'll need to initialize a new `Loader` object using the library like so:\r\n\r\n```\r\nvar configLoader = new stormpathConfig.Loader([/* strategies */]);\r\n```\r\n\r\nNotice how the first argument is commented out. This needs to be an array of one or many strategies. See [strategies](#strategies)Â for a list of all supported strategies and on how to create your own.\r\n\r\nE.g. below demonstrates how the Stormpath configuration can be created and loaded from only the environment.\r\n\r\n```\r\nvar strategy = stormpathConfig.strategy;\r\n\r\nvar configLoader = new StormpathConfig.Loader([\r\n    new strategy.LoadEnvConfigStrategy(),\r\n    new strategy.LoadFileConfigStrategy('~/stormpath.yml')\r\n]);\r\n```\r\n\r\nNow, once you got your new `Loader` object all you need to do is call the `configLoader.load(callback)` method to load the configuration data.\r\nYou can do this like so:\r\n\r\n```\r\nconfigLoader.load(function (err, config) {\r\n  if (err) {\r\n    console.error(err);\r\n  } else {\r\n    console.log(\"Configuration loaded:\", config);\r\n  }\r\n});\r\n```\r\n\r\n## Strategies\r\n\r\n### Creating your own strategy\r\n\r\nA strategy is simply a prototype that implements a method named `process` that takes the parameters `config` and `callback`. All it expects is that the callback is called with the first argument as an error (null if none) and the second containing the modified/processed config. E.g. as shown below:\r\n\r\n```\r\nfunction MyConfigStrategy () {\r\n}\r\n\r\nMyConfigStrategy.prototype.process = function (config, callback) {\r\n  // Apply strategy to config and return result in callback\r\n  config.someNewField = \"abc\"; // Append someNewField to our config\r\n  callback(null, config);\r\n};\r\n```\r\n\r\n### Supported\r\n\r\nSome default strategies for loading a configuration has been included. These are accessible through the `strategy` export. I.e. `require('stormpath-config').strategy`.\r\n\r\n#### LoadEnvConfigStrategy\r\n\r\nLoads configuration from the system environment.\r\n\r\n#### LoadAPIKeyConfigStrategy\r\n\r\nLoads client API key configuration from a .properties file.\r\n\r\n#### LoadFileConfigStrategy\r\n\r\nLoads a configuration from either a JSON or YAML file.\r\n\r\n#### ExtendConfigStrategy\r\n\r\nExtend a the configuration with an existing object.\r\n\r\n#### EnrichClientConfigStrategy\r\n\r\nEnriches the configuration with client config resolved at runtime.\r\n\r\n#### EnrichClientFromRemoteConfigStrategy\r\n\r\nEnriches the configuration with client config resolved from the Stormpath API.\r\n\r\n#### EnrichIntegrationConfigStrategy\r\n\r\nEnriches the configuration with integration config resolved at runtime.\r\n\r\n#### EnrichIntegrationFromRemoteConfigStrategy\r\n\r\nEnriches the configuration with integration config resolved from the Stormpath API.\r\n\r\n#### ValidateClientConfigStrategy\r\n\r\nValidates the client configuration.\r\n\r\n## Resources\r\n\r\nBelow are some resources you might find useful:\r\n\r\n- [express-stormpath Github repository](https://github.com/stormpath/stormpath-express)\r\n- [express-stormpath documentation](http://docs.stormpath.com/nodejs/express/latest/)\r\n- [Stormpath website](https://stormpath.com)\r\n\r\n## Todo\r\n\r\n* Write unit tests.\r\n\r\n## Contributing\r\n\r\nYou can make your own contributions by forking this repository, making your\r\nchanges in a feature branch, and then issuing a pull request back to this\r\nrepository on the `master` branch.\r\n\r\nHere's how you might do this if you wanted to contribute something:\r\n\r\n```console\r\n$ git clone https://github.com/stormpath/stormpath-node-config.git\r\n$ cd stormpath-node-config\r\n$ git checkout -b feature-somthing-something\r\n$ # make changes\r\n$ git commit -m \"This was easy!\"\r\n$ # submit a pull request\r\n```\r\n\r\nWe regularly maintain this repository, and are quick to review pull requests\r\nand accept changes!\r\n\r\nWe <333 contributions!\r\n\r\n## Copyright\r\n\r\nCopyright &copy;2015 Stormpath, Inc. and contributors.\r\n\r\nThis project is open-source via the [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stormpath/stormpath-node-config.git"
  },
  "scripts": {
    "test": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks test --recursive",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --recursive && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "version": "0.0.27"
}
